;; Object modes/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "modes/"
  :tables (list 
   (semanticdb-table "mode-configs.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("javascript-mode" include nil nil [1 27]) ("python-mode" include nil nil [28 50]) ("haskell-mode" include nil nil [51 74]) ("css-mode" include nil nil [75 94]) ("php-mode" include nil nil [95 114]) ("ruby-mode" include nil nil [115 135]) ("ruby-electric" include nil nil [136 160]) ("smalltalk-mode" include nil nil [161 186]) ("gambit" include nil nil [187 204]) ("erlang" include nil nil [205 222]) ("gst-mode" include nil nil [223 242]) ("nxml-mode" include nil nil [243 263]) ("load-library" code nil nil [342 364]) ("tuareg" include nil nil [365 382]) ("slime" include nil nil [383 399]) ("factor" include nil nil [400 417]) ("mmm-mode" include nil nil [418 437]) ("flyspell" include nil nil [438 457]) ("setq" code nil nil [458 537]) ("add-hook" code nil nil [538 582]) ("defalias" code nil nil [799 830]) ("add-hook" code nil nil [832 878]) ("add-hook" code nil nil [879 930]) ("add-hook" code nil nil [931 972]) ("add-hook" code nil nil [973 1015]) ("add-hook" code nil nil [1061 1114]) ("add-hook" code nil nil [1115 1186]) ("add-hook" code nil nil [1187 1283]) ("setq" code nil nil [1285 1321]) ("load-library" code nil nil [1323 1350]) ("if" code nil nil [1352 1471]) ("css-mode" function (:prototype-flag t :user-visible-flag t) nil [1473 1535]) ("gambit-inferior-mode" function (:prototype-flag t) nil [1537 1613]) ("gambit-mode" function (:prototype-flag t) nil [1614 1678]) ("add-hook" code nil nil [1679 1748]) ("add-hook" code nil nil [1749 1800]) ("setq" code nil nil [1801 1838]) ("put" code nil nil [1839 1877]) ("put" code nil nil [1878 1923]) ("put" code nil nil [1924 1967]) ("put" code nil nil [1968 2012]) ("setq" code nil nil [2029 2072]) ("setq" code nil nil [2073 2126]) ("server-start" code nil nil [2127 2141]) ("setq" code nil nil [2152 2197]) ("slime-setup" code nil nil [2198 2211]))
    :file "mode-configs.el"
    :pointmax 2211
    :unmatched-syntax 'nil
    )
   (semanticdb-table "auto-modes.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("set-default" code nil nil [1 162]) ("set-default" code nil nil [164 284]) ("set-default" code nil nil [286 386]) ("set-default" code nil nil [388 482]) ("set-default" code nil nil [484 583]) ("set-default" code nil nil [585 681]) ("set-default" code nil nil [683 779]) ("set-default" code nil nil [781 869]) ("set-default" code nil nil [871 962]) ("setq" code nil nil [964 1044]) ("set-default" code nil nil [1046 1163]) ("set-default" code nil nil [1165 1254]))
    :file "auto-modes.el"
    :pointmax 1254
    :unmatched-syntax 'nil
    )
   (semanticdb-table "quack.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("quack-copyright" variable (:constant-flag t :default-value "Copyright (C) 2002-2006 Neil W. Van Dyke") nil [72 144]) ("quack-copyright-2" variable (:constant-flag t :default-value "Portions Copyright (C) Free Software Foundation") nil [145 224]) ("quack-version" variable (:constant-flag t :default-value "0.29") nil [358 394]) ("quack-author-name" variable (:constant-flag t :default-value "Neil Van Dyke") nil [395 440]) ("quack-author-email" variable (:constant-flag t :default-value "neil@neilvandyke.org") nil [441 493]) ("quack-web-page" variable (:constant-flag t :default-value "http://www.neilvandyke.org/quack/") nil [494 559]) ("quack-legal-notice" variable (:constant-flag t :default-value "This is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation; either version 2, or (at your option) any later version.  This is
distributed in the hope that it will be useful, but without any warranty;
without even the implied warranty of merchantability or fitness for a
particular purpose.  See the GNU General Public License for more details.  You
should have received a copy of the GNU General Public License along with Emacs;
see the file `COPYING'.  If not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.") nil [561 1257]) ("quack-cvsid" variable (:constant-flag t :default-value "$Id: quack.el,v 1.426 2006-11-12 09:09:18 neil Exp $") nil [1259 1336]) ("advice" include nil nil [23621 23638]) ("cmuscheme" include nil nil [23639 23659]) ("compile" include nil nil [23660 23678]) ("custom" include nil nil [23679 23696]) ("easymenu" include nil nil [23697 23716]) ("font-lock" include nil nil [23717 23737]) ("scheme" include nil nil [23738 23755]) ("thingatpt" include nil nil [23756 23776]) ("unless" code nil nil [23778 23870]) ("defgroup" code nil nil [23894 24067]) ("quack-dir" variable (:user-visible-flag t :default-value "~/.quack") nil [24069 24208]) ("quack-scheme-mode-keymap-prefix" variable (:user-visible-flag t :default-value "") nil [24210 24775]) ("quack-remap-find-file-bindings-p" variable (:default-value t) nil [24777 24996]) ("quack-global-menu-p" variable (:user-visible-flag t :default-value t) nil [24998 25126]) ("quack-tabs-are-evil-p" variable (:user-visible-flag t :default-value t) nil [25128 25267]) ("quack-browse-url-browser-function" variable (:user-visible-flag t) nil [25269 25701]) ("quack-manuals" variable (:user-visible-flag t :default-value (quote ((r6rs "R6RS" "http://www.r6rs.org/" nil) (r5rs "R5RS" "http://www.schemers.org/Documents/Standards/R5RS/HTML/" nil) (bigloo "Bigloo" "http://www-sop.inria.fr/mimosa/fp/Bigloo/doc/bigloo.html" nil) (chez "Chez Scheme User's Guide" "http://www.scheme.com/csug/index.html" nil) (chicken "Chicken User's Manual" "http://www.call-with-current-continuation.org/manual/manual.html" nil) (gambit "Gambit-C documentation (local)" "file://home/james/doc/gambit-c-doc.html") (gauche "Gauche Reference Manual" "http://www.shiro.dreamhost.com/scheme/gauche/man/gauche-refe.html" nil) (mitgnu-ref "MIT/GNU Scheme Reference" "http://www.gnu.org/software/mit-scheme/documentation/scheme.html" nil) (mitgnu-user "MIT/GNU Scheme User's Manual" "http://www.gnu.org/software/mit-scheme/documentation/user.html" nil) (mitgnu-sos "MIT/GNU Scheme SOS Reference Manual" "http://www.gnu.org/software/mit-scheme/documentation/sos.html" nil) (plt-mzscheme "PLT MzScheme: Language Manual" plt t) (plt-mzlib "PLT MzLib: Libraries Manual" plt t) (plt-mred "PLT MrEd: Graphical Toolbox Manual" plt t) (plt-framework "PLT Framework: GUI Application Framework" plt t) (plt-drscheme "PLT DrScheme: Programming Environment Manual" plt nil) (plt-insidemz "PLT Inside PLT MzScheme" plt nil) (plt-tools "PLT Tools: DrScheme Extension Manual" plt nil) (plt-mzc "PLT mzc: MzScheme Compiler Manual" plt t) (plt-r5rs "PLT R5RS" plt t) (scsh "Scsh Reference Manual" "http://www.scsh.net/docu/html/man-Z-H-1.html" nil) (sisc "SISC for Seasoned Schemers" "http://sisc.sourceforge.net/manual/html/" nil) (htdp "How to Design Programs" "http://www.htdp.org/" nil) (htus "How to Use Scheme" "http://www.htus.org/" nil) (t-y-scheme "Teach Yourself Scheme in Fixnum Days" "http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme.html" nil) (tspl "Scheme Programming Language (Dybvig)" "http://www.scheme.com/tspl/" nil) (sicp "Structure and Interpretation of Computer Programs" "http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html" nil) (slib "SLIB" "http://swissnet.ai.mit.edu/~jaffer/SLIB.html" nil) (faq "Scheme Frequently Asked Questions" "http://www.schemers.org/Documents/FAQ/" nil)))) nil [25703 31188]) ("quack-local-keywords-for-remote-manuals-p" variable (:user-visible-flag t :default-value t) nil [31190 32048]) ("quack-srfi-master-base-url" variable (:user-visible-flag t :default-value "http://srfi.schemers.org/") nil [32050 32337]) ("quack-pltcollect-dirs" variable (:user-visible-flag t :default-value (let ((good (quote nil))) (mapcar (function (lambda (dir) (and dir (not (assoc dir good)) (file-directory-p dir) (setq good (nconc good (list dir)))))) (\` ((\,@ (let ((v (getenv "PLTCOLLECTS"))) (and v (split-string v ":")))) (\, (let ((v (getenv "PLTHOME"))) (and v (expand-file-name "collects" v)))) (\,@ (mapcar (quote expand-file-name) (quote ("/usr/lib/plt/collects" "/usr/local/lib/plt/collects"))))))) good)) nil [32339 33196]) ("quack-fontify-style" variable (:user-visible-flag t :default-value (quote plt)) nil [33198 33862]) ("quack-pltish-fontify-definition-names-p" variable (:user-visible-flag t :default-value t) nil [33864 34173]) ("quack-pltish-fontify-keywords-p" variable (:user-visible-flag t :default-value t) nil [34175 34458]) ("quack-pltish-keywords-to-fontify" variable (:user-visible-flag t :default-value (quote ("and" "begin" "begin0" "c-declare" "c-lambda" "case" "case-lambda" "class" "class*" "class*/names" "class100" "class100*" "compound-unit/sig" "cond" "cond-expand" "define" "define-class" "define-const-structure" "define-constant" "define-embedded" "define-entry-point" "define-external" "define-foreign-record" "define-foreign-type" "define-foreign-variable" "define-generic" "define-generic-procedure" "define-inline" "define-location" "define-macro" "define-method" "define-module" "define-opt" "define-public" "define-reader-ctor" "define-record" "define-record-printer" "define-record-type" "define-signature" "define-struct" "define-structure" "define-syntax" "define-syntax-set" "define-values" "define-values/invoke-unit/sig" "define/contract" "define/override" "define/private" "define/public" "delay" "do" "else" "exit-handler" "field" "if" "import" "inherit" "inherit-field" "init" "init-field" "init-rest" "instantiate" "interface" "lambda" "let" "let*" "let*-values" "let+" "let-syntax" "let-values" "let/ec" "letrec" "letrec-values" "letrec-syntax" "match-lambda" "match-lambda*" "match-let" "match-let*" "match-letrec" "match-define" "mixin" "module" "opt-lambda" "or" "override" "override*" "namespace-variable-bind/invoke-unit/sig" "parameterize" "private" "private*" "protect" "provide" "provide-signature-elements" "provide/contract" "public" "public*" "quasiquote" "quote" "receive" "rename" "require" "require-for-syntax" "send" "send*" "set!" "set!-values" "signature->symbols" "super-instantiate" "syntax-case" "syntax-case*" "syntax-error" "syntax-rules" "unit/sig" "unless" "unquote" "unquote-splicing" "when" "with-handlers" "with-method" "with-syntax"))) nil [34460 36768]) ("quack-emacsish-keywords-to-fontify" variable (:user-visible-flag t :default-value (quote ("and" "begin" "begin0" "call-with-current-continuation" "call-with-input-file" "call-with-output-file" "call/cc" "case" "case-lambda" "class" "cond" "delay" "do" "else" "exit-handler" "field" "for-each" "if" "import" "inherit" "init-field" "interface" "lambda" "let" "let*" "let*-values" "let-values" "let-syntax" "let/ec" "letrec" "letrec-syntax" "map" "mixin" "opt-lambda" "or" "override" "protect" "provide" "public" "rename" "require" "require-for-syntax" "syntax" "syntax-case" "syntax-error" "syntax-rules" "unit/sig" "unless" "when" "with-syntax"))) nil [36770 37603]) ("quack-fontify-threesemi-p" variable (:user-visible-flag t :default-value t) nil [37605 37832]) ("quack-pretty-lambda-p" variable (:user-visible-flag t) nil [37834 38474]) ("quack-programs" variable (:default-value (quote ("bigloo" "csi" "csi -hygienic" "gosh" "gsi" "gsi ~~/syntax-case.scm -" "guile" "kawa" "mit-scheme" "mred -z" "mzscheme" "mzscheme -M errortrace" "rs" "scheme" "scheme48" "scsh" "sisc" "stklos" "sxi"))) nil [38476 39010]) ("quack-default-program" variable (:default-value "mzscheme") nil [39012 39154]) ("quack-run-scheme-always-prompts-p" variable (:default-value t) nil [39156 39477]) ("quack-run-scheme-prompt-defaults-to-last-p" variable (:default-value t) nil [39479 39645]) ("quack-remember-new-programs-p" variable (:default-value t) nil [39647 39783]) ("quack-switch-to-scheme-method" variable (:default-value (quote other-window)) nil [39785 40399]) ("quack-warp-pointer-to-frame-p" variable (:default-value t) nil [40401 40690]) ("quack-newline-behavior" variable (:user-visible-flag t :default-value (quote newline-indent)) nil [40692 41221]) ("quack-smart-open-paren-p" variable nil nil [41223 41700]) ("quack-options-persist-p" variable (:default-value t) nil [41702 42156]) ("quack-quiet-warnings-p" variable (:default-value t) nil [42158 42297]) ("quack-pltish-comment-face" variable (:constant-flag t :default-value (quote quack-pltish-comment-face)) nil [42299 42362]) ("quack-pltish-comment-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "cyan4")) (((class color) (background dark)) (:foreground "cyan1")) (t (:slant italic))))) nil [42363 42663]) ("quack-pltish-selfeval-face" variable (:constant-flag t :default-value (quote quack-pltish-selfeval-face)) nil [42665 42730]) ("quack-pltish-selfeval-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "green4")) (((class color) (background dark)) (:foreground "green2")) (t nil)))) nil [42731 43034]) ("quack-pltish-paren-face" variable (:constant-flag t :default-value (quote quack-pltish-paren-face)) nil [43036 43095]) ("quack-pltish-paren-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "red3")) (((class color) (background dark)) (:foreground "red1")) (((class grayscale)) (:foreground "gray")) (t nil)))) nil [43096 43444]) ("quack-banner-face" variable (:constant-flag t :default-value (quote quack-banner-face)) nil [43446 43493]) ("quack-banner-face" variable (:default-value (quote ((t (:family "Helvetica"))))) nil [43494 43705]) ("quack-pltish-defn-face" variable (:constant-flag t :default-value (quote quack-pltish-defn-face)) nil [43707 43764]) ("quack-pltish-defn-face" variable (:default-value (quote ((((class color) (background light)) (:bold t :foreground "blue3")) (((class color) (background dark)) (:bold t :foreground "blue1")) (t (:bold t :underline t))))) nil [43765 44144]) ("quack-pltish-class-defn-face" variable (:constant-flag t :default-value (quote quack-pltish-class-defn-face)) nil [44146 44215]) ("quack-pltish-class-defn-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "purple3" :inherit quack-pltish-defn-face)) (((class color) (background dark)) (:foreground "purple1" :inherit quack-pltish-defn-face)) (t (:inherit quack-pltish-defn-face))))) nil [44216 44646]) ("quack-pltish-module-defn-face" variable (:constant-flag t :default-value (quote quack-pltish-module-defn-face)) nil [44648 44719]) ("quack-pltish-module-defn-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "purple3" :inherit quack-pltish-defn-face)) (((class color) (background dark)) (:foreground "purple1" :inherit quack-pltish-defn-face)) (t (:inherit quack-pltish-defn-face))))) nil [44720 45152]) ("quack-pltish-keyword-face" variable (:constant-flag t :default-value (quote quack-pltish-keyword-face)) nil [45154 45217]) ("quack-pltish-keyword-face" variable (:default-value (quote ((t (:bold t))))) nil [45218 45410]) ("quack-threesemi-semi-face" variable (:constant-flag t :default-value (quote quack-threesemi-semi-face)) nil [45412 45475]) ("quack-threesemi-semi-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "#a0ffff" :background "#c0ffff")) (((class color) (background dark)) (:foreground "cyan2" :background "cyan4")) (t (:slant italic))))) nil [45476 45811]) ("quack-threesemi-text-face" variable (:constant-flag t :default-value (quote quack-threesemi-text-face)) nil [45813 45876]) ("quack-threesemi-text-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "cyan4" :background "#c0ffff")) (((class color) (background dark)) (:foreground "white" :background "cyan4")) (t (:slant italic))))) nil [45877 46205]) ("quack-threesemi-h1-face" variable (:constant-flag t :default-value (quote quack-threesemi-h1-face)) nil [46207 46266]) ("quack-threesemi-h1-face" variable (:default-value (quote ((t (:bold t :family "Helvetica" :height 1.4 :size "20pt"))))) nil [46267 46426]) ("quack-threesemi-h2-face" variable (:constant-flag t :default-value (quote quack-threesemi-h2-face)) nil [46428 46487]) ("quack-threesemi-h2-face" variable (:default-value (quote ((t (:bold t :family "Helvetica" :height 1.2 :size "16pt"))))) nil [46488 46647]) ("quack-threesemi-h3-face" variable (:constant-flag t :default-value (quote quack-threesemi-h3-face)) nil [46649 46708]) ("quack-threesemi-h3-face" variable (:default-value (quote ((t (:bold t :family "Helvetica"))))) nil [46709 46843]) ("quack-pltfile-prologue-face" variable (:constant-flag t :default-value (quote quack-pltfile-prologue-face)) nil [46845 46912]) ("quack-pltfile-prologue-face" variable (:default-value (quote ((((class color)) (:foreground "black" :background "gray66")) (((class grayscale)) (:foreground "black" :background "gray66")) (t nil)))) nil [46913 47199]) ("quack-pltfile-dir-face" variable (:constant-flag t :default-value (quote quack-pltfile-dir-face)) nil [47201 47258]) ("quack-pltfile-dir-face" variable (:default-value (quote ((((class color)) (:bold t :foreground "white" :background "gray33" :family "Helvetica" :height 1.2 :size "20pt")) (((class grayscale)) (:bold t :foreground "white" :background "gray33" :family "Helvetica" :height 1.2 :size "20pt")) (t (:bold t :inverse-video t))))) nil [47259 47739]) ("quack-pltfile-file-face" variable (:constant-flag t :default-value (quote quack-pltfile-file-face)) nil [47741 47800]) ("quack-pltfile-file-face" variable (:default-value (quote ((((class color)) (:bold t :foreground "black" :background "gray66" :family "Helvetica" :height 1.2 :size "20pt")) (((class grayscale)) (:bold t :foreground "black" :background "gray66" :family "Helvetica" :height 1.2 :size "20pt")) (t (:bold t :inverse-video t))))) nil [47801 48277]) ("quack-about-title-face" variable (:constant-flag t :default-value (quote quack-about-title-face)) nil [48279 48336]) ("quack-about-title-face" variable (:default-value (quote ((((class color) (background light)) (:bold t :family "Helvetica" :foreground "#008000" :height 240 :size "24pt")) (((class color) (background dark)) (:bold t :family "Helvetica" :foreground "#00f000" :height 240 :size "24pt")) (t (:bold t :family "Helvetica" :height 240 :size "24pt"))))) nil [48337 48806]) ("quack-about-face" variable (:constant-flag t :default-value (quote quack-about-face)) nil [48808 48853]) ("quack-about-face" variable (:default-value (quote ((t (:family "Helvetica"))))) nil [48854 48976]) ("quack-smallprint-face" variable (:constant-flag t :default-value (quote quack-smallprint-face)) nil [48978 49033]) ("quack-smallprint-face" variable (:default-value (quote ((t (:family "Courier" :height 80 :size "8pt"))))) nil [49034 49188]) ("quack-xemacs-p" variable (:default-value (eval (quote (and (boundp (quote running-xemacs)) running-xemacs)))) nil [50469 50546]) ("quack-gnuemacs-p" variable (:default-value (not quack-xemacs-p)) nil [50549 50595]) ("quack-when-xemacs" function (:arguments ("&rest" "args")) nil [50598 50685]) ("quack-when-gnuemacs" function (:arguments ("&rest" "args")) nil [50687 50778]) ("quack-define-key-after" function (:arguments ("keymap" "key" "definition" "&optional" "after")) nil [50780 50993]) ("quack-delete-horizontal-space" function (:arguments ("&rest" "args")) nil [50995 51177]) ("quack-match-string-no-properties" function (:arguments ("&rest" "args")) nil [51179 51310]) ("quack-menufilter-return" function (:arguments ("name" "form")) nil [51312 51988]) ("quack-propertize" function (:arguments ("obj" "&rest" "props")) nil [51990 52296]) ("when" code nil nil [52319 52422]) ("quack-make-hash-table" function (:arguments ("&rest" "args")) nil [52487 52651]) ("quack-puthash" function (:arguments ("key" "value" "table")) nil [52654 52791]) ("quack-gethash" function (:arguments ("key" "table" "&optional" "dflt")) nil [52793 52938]) ("quack-fake-make-hash-table" function (:arguments ("&rest" "args")) nil [52940 53148]) ("quack-fake-puthash" function (:arguments ("key" "value" "table")) nil [53150 53357]) ("quack-fake-gethash" function (:arguments ("key" "table" "&optional" "dflt")) nil [53359 53503]) ("quack-make-face-ovlext" function (:arguments ("beg" "end" "face")) nil [53668 53859]) ("quack-make-hiding-ovlext" function (:arguments ("beg" "end")) nil [53861 54069]) ("quack-activity" function (:arguments ("what" "&rest" "body")) nil [54103 54356]) ("quack-internal-error" function (:arguments ("&optional" "format" "&rest" "args")) nil [54358 54533]) ("quack-warning" function (:arguments ("format" "&rest" "args")) nil [54535 54697]) ("quack-re-alt" function (:arguments ("&rest" "regexps")) nil [54724 54819]) ("quack-re-optional" function (:arguments ("&rest" "regexps")) nil [54821 54930]) ("quack-delete-file-if-can" function (:arguments ("file")) nil [55076 55169]) ("quack-expand-file-name" function (:arguments ("name-or-names" "&optional" "directory")) nil [55171 55480]) ("quack-kill-current-buffer" function nil nil [55482 55567]) ("quack-line-at-point" function nil nil [55569 55737]) ("quack-looking-at-backward" function (:arguments ("re" "&optional" "limit")) nil [55739 56034]) ("quack-looking-at-close-paren-backward" function nil nil [56036 56155]) ("quack-looking-at-open-paren-backward" function nil nil [56157 56275]) ("quack-make-directory" function (:arguments ("dir")) nil [56277 56414]) ("quack-make-directory-for-file" function (:arguments ("file")) nil [56416 56545]) ("quack-propertize-bold" function (:arguments ("str")) nil [56547 56619]) ("quack-propertize-face" function (:arguments ("str" "face")) nil [56621 56697]) ("quack-propertize-italic" function (:arguments ("str")) nil [56699 56775]) ("quack-sort-string-list-copy" function (:arguments ("lst")) nil [56777 56856]) ("quack-uncomment-region" function (:arguments ("beg" "end")) nil [56858 57000]) ("quack-without-side-whitespace" function (:arguments ("str")) nil [57002 57395]) ("quack-backward-sexp-re" variable (:constant-flag t :default-value (concat "\\`" (quack-re-alt "[^\";\\\\]" "\\\\\\." (concat "\"" (quack-re-alt "[^\"\\\\]" "\\\\\\.") "*\"")) "*\\([\"\\\\]\\)?")) nil [57433 57775]) ("quack-backward-sexp" function nil nil [57777 58705]) ("quack-parent-sexp-search" function (:arguments ("name-regexp" "&optional" "max-depth" "max-breadth")) nil [58707 62208]) ("quack-not-symbol-char-at-point-p" function (:arguments ("pt")) nil [62341 62634]) ("if" code nil nil [62687 63159]) ("quack-quote-url-substring" function (:arguments ("str" "&optional" "quote-slash-p" "always-new-p")) nil [63176 64014]) ("quack-file-url" function (:arguments ("dir" "file")) nil [64016 64250]) ("quack-build-url" function (:arguments ("base" "path")) nil [64252 64640]) ("quack-browse-url" function (:arguments ("url")) nil [64660 64923]) ("quack-browse-quack-web-page" function nil nil [64925 65015]) ("quack-w3m-browse-url-other-window" function (:arguments ("url" "&optional" "new-window")) nil [65017 65420]) ("quack-web-get-log-buffer-name" variable (:constant-flag t :default-value "*quack-web-get*") nil [65439 65497]) ("quack-web-get-to-file" function (:arguments ("url" "out-file")) nil [65499 66067]) ("quack-web-get-to-file-via-wget" function (:arguments ("url" "out-file")) nil [66230 67514]) ("quack-strip-limited-html-tags" function (:arguments ("str")) nil [67534 68142]) ("quack-temp-dir" function nil nil [68160 68247]) ("random" code nil nil [68325 68335]) ("quack-make-temp-file" function (:arguments ("purpose-str")) nil [68337 69258]) ("quack-about" function nil nil [69271 71608]) ("quack-pltcollects-alist-cache" variable nil nil [71631 71673]) ("quack-invalidate-pltcollects-caches" function nil nil [71675 71800]) ("quack-pltcollects-alist" function nil nil [71802 72861]) ("quack-dir-for-pltcollect" function (:arguments ("name")) nil [72863 72949]) ("quack-dired-pltcollect" function nil nil [72951 73477]) ("quack-shorter-file-relative-name" function (:arguments ("filename" "&optional" "directory")) nil [73494 73766]) ("quack-find-file" function nil nil [73899 74795]) ("quack-find-file-default" function nil nil [74797 74952]) ("quack-pltrequire-at-point-data-re" variable (:constant-flag t :default-value (quack-re-alt "dynamic-require" (concat "require" (quack-re-alt "-for-syntax" "")))) nil [76385 76593]) ("quack-pltrequire-at-point-data-1-re" variable (:constant-flag t :default-value (concat quack-pltrequire-at-point-data-re "\\>")) nil [76595 76702]) ("quack-pltrequire-at-point-data-2-re" variable (:constant-flag t :default-value (concat "[^
]*[[(]" quack-pltrequire-at-point-data-re "[ 	]+\\([^
]+\\)")) nil [76704 76853]) ("quack-pltrequire-at-point-data-1" function nil nil [76855 77381]) ("quack-pltrequire-at-point-data-2" function nil nil [77383 78229]) ("quack-pltrequire-at-point-filename" function (:arguments ("&optional" "silent")) nil [78231 79545]) ("quack-newline" function (:arguments ("&optional" "arg")) nil [79570 80140]) ("quack-insert-closing" function (:arguments ("prefix" "default-close" "other-open" "other-close")) nil [80379 80974]) ("quack-insert-closing-paren" function (:arguments ("&optional" "prefix")) nil [80976 81093]) ("quack-insert-closing-bracket" function (:arguments ("&optional" "prefix")) nil [81095 81214]) ("quack-insert-opening" function (:arguments ("prefix" "char")) nil [81242 81413]) ("quack-insert-opening-paren" function (:arguments ("&optional" "prefix")) nil [81415 81524]) ("quack-insert-opening-bracket" function (:arguments ("&optional" "prefix")) nil [81526 81637]) ("quack-toggle-lambda-re-1" variable (:constant-flag t :default-value (concat "define\\*?" (quack-re-alt "-public" "/override" "/private" "/public" ""))) nil [81678 81904]) ("quack-toggle-lambda-re-2" variable (:constant-flag t :default-value (let ((ws-opt "[ 	
]*") (symbol "[^][() 	
]+") (open-paren "[[(]") (close-paren "[])]")) (concat ws-opt (quack-re-alt (concat "\\(" "\\(" symbol "\\)" ws-opt open-paren ws-opt "lambda" ws-opt open-paren ws-opt "\\)") (concat "\\(" open-paren ws-opt "\\(" symbol "\\)" ws-opt "\\)")) "\\(" close-paren "\\)?"))) nil [81906 83014]) ("quack-toggle-lambda" function nil nil [83016 86181]) ("quack-delete-all-in-buffer" function (:arguments ("regexp" "&optional" "subexp")) nil [86569 86880]) ("quack-tidy-buffer" function (:user-visible-flag t) nil [86882 89922]) ("quack-srfi-subindex-kinds" variable (:constant-flag t :default-value (quote (draft final withdrawn))) nil [90168 90448]) ("quack-srfi-completes-cache" variable (:default-value (quote invalid)) nil [90450 90494]) ("quack-srfi-menu-cache" variable (:default-value (quote invalid)) nil [90495 90539]) ("quack-srfi-completes" function nil nil [90541 90691]) ("quack-srfi-menu" function (:arguments ("&optional" "noninteractive")) nil [90693 90867]) ("quack-srfi-master-url" function (:arguments ("path")) nil [90869 90957]) ("quack-srfi-subindex-master-url" function (:arguments ("kind")) nil [90959 91073]) ("quack-srfi-dir" function nil nil [91075 91163]) ("quack-srfi-subindex-file" function (:arguments ("kind")) nil [91165 91278]) ("quack-srfi-subindex-basename" function (:arguments ("kind")) nil [91280 91355]) ("quack-invalidate-srfi-index-caches" function nil nil [91357 91492]) ("quack-update-srfi-index" function nil nil [91494 91628]) ("quack-download-srfi-subindex-files" function nil nil [91630 92039]) ("quack-download-srfi-subindex-files-if-missing" function nil nil [92041 92479]) ("quack-process-srfi-subindex-files" function (:arguments ("&optional" "noninteractive")) nil [92481 95768]) ("quack-parse-srfi-subindex-file" function (:arguments ("kind" "&optional" "noninteractive")) nil [95770 96385]) ("quack-parse-srfi-index-buffer-re-1" variable (:constant-flag t :default-value (concat "<LI><A HREF=\"?srfi-[0-9]+/?\"?>SRFI[ 	]+" "\\([0-9]+\\)" "</A>:?[ 	]*" "\\(" (quack-re-alt "[^
<>]" "</?[a-z]+>") "+" "\\)")) nil [96387 96729]) ("quack-parse-srfi-subindex-buffer" function (:arguments ("kind")) nil [96731 97577]) ("quack-srfi-num-url" function (:arguments ("num")) nil [97579 97731]) ("quack-srfi-num-at-point-re-1" variable (:constant-flag t :default-value "srfi[-: 	]*\\([0-9]+\\)") nil [97733 97801]) ("quack-srfi-num-at-point-re-2" variable (:constant-flag t :default-value (concat quack-srfi-num-at-point-re-1 "[^
]*")) nil [97803 97963]) ("quack-srfi-num-at-point" function nil nil [97965 98731]) ("quack-view-srfi" function (:arguments ("num")) nil [98733 98982]) ("quack-srfi-num-prompt" function (:arguments ("prompt")) nil [98984 99775]) ("quack-kw-get-syntax" function (:arguments ("o")) nil [99807 99856]) ("quack-kw-get-file" function (:arguments ("o")) nil [99857 99906]) ("quack-kw-get-fragment" function (:arguments ("o")) nil [99907 99956]) ("quack-kw-set-syntax" function (:arguments ("o" "v")) nil [99958 100012]) ("quack-kw-set-file" function (:arguments ("o" "v")) nil [100013 100067]) ("quack-kw-set-fragment" function (:arguments ("o" "v")) nil [100068 100122]) ("quack-doc-get-type" function (:arguments ("o")) nil [100282 100336]) ("quack-doc-get-sym" function (:arguments ("o")) nil [100337 100391]) ("quack-doc-get-title" function (:arguments ("o")) nil [100392 100446]) ("quack-doc-get-loc" function (:arguments ("o")) nil [100447 100501]) ("quack-doc-get-kw-p" function (:arguments ("o")) nil [100502 100556]) ("quack-doc-get-start-url" function (:arguments ("o")) nil [100557 100611]) ("quack-doc-get-kw-base-url" function (:arguments ("o")) nil [100612 100666]) ("quack-doc-get-kw-file" function (:arguments ("o")) nil [100667 100721]) ("quack-doc-get-kw-hashtable" function (:arguments ("o")) nil [100722 100776]) ("quack-doc-set-type" function (:arguments ("o" "v")) nil [100778 100837]) ("quack-doc-set-sym" function (:arguments ("o" "v")) nil [100838 100897]) ("quack-doc-set-title" function (:arguments ("o" "v")) nil [100898 100957]) ("quack-doc-set-loc" function (:arguments ("o" "v")) nil [100958 101017]) ("quack-doc-set-kw-p" function (:arguments ("o" "v")) nil [101018 101077]) ("quack-doc-set-start-url" function (:arguments ("o" "v")) nil [101078 101137]) ("quack-doc-set-kw-base-url" function (:arguments ("o" "v")) nil [101138 101197]) ("quack-doc-set-kw-file" function (:arguments ("o" "v")) nil [101198 101257]) ("quack-doc-set-kw-hashtable" function (:arguments ("o" "v")) nil [101258 101317]) ("quack-manual-to-doc" function (:arguments ("manual")) nil [101319 106567]) ("quack-doc-keyword-lookup" function (:arguments ("doc" "keyword")) nil [106569 106943]) ("quack-doc-import-keywords" function (:arguments ("doc")) nil [106945 107101]) ("quack-doc-import-plt-manual-keywords" function (:arguments ("doc")) nil [107103 110817]) ("quack-read-sexp-file" function (:arguments ("filename")) nil [110819 111178]) ("quack-docs" variable (:default-value (quote invalid)) nil [111208 111236]) ("quack-docs" function nil nil [111238 111329]) ("quack-docs-build" function nil nil [111331 111513]) ("quack-docs-manual-lookup" function (:arguments ("sym")) nil [111515 111786]) ("quack-docs-manual-keyword-lookup" function (:arguments ("keyword")) nil [111788 112748]) ("quack-kwmatch-get-doc" function (:arguments ("o")) nil [112783 112829]) ("quack-kwmatch-get-kw" function (:arguments ("o")) nil [112830 112876]) ("quack-kwmatch-url" function (:arguments ("kwmatch")) nil [112878 113164]) ("quack-view-manual" function (:user-visible-flag t :arguments ("&optional" "sym")) nil [113186 114098]) ("quack-manuals-menu-cache" variable (:default-value (quote invalid)) nil [114100 114147]) ("quack-manuals-completes-cache" variable (:default-value (quote invalid)) nil [114148 114195]) ("quack-invalidate-manuals-caches" function nil nil [114197 114383]) ("quack-manuals-completes" function nil nil [115141 115873]) ("quack-manuals-menu" function nil nil [115875 116282]) ("quack-manuals-webjump-sites" function nil nil [116284 117279]) ("quack-view-keyword-docs" function (:arguments ("keyword")) nil [117437 118030]) ("quack-keyword-at-point" function nil nil [118032 118523]) ("quack-prompt-for-keyword" function (:arguments ("prompt")) nil [118525 119020]) ("quack-prompt-for-kwmatch-choice" function (:arguments ("prompt" "kwmatch-list")) nil [119022 120355]) ("quack-run-scheme-prompt-history" variable (:default-value (quote nil)) nil [120379 120423]) ("quack-remember-program-maybe" function (:arguments ("program")) nil [120425 120686]) ("quack-run-scheme-prompt" function nil nil [120688 121595]) ("quack-run-scheme-prompt-completion-collection" function nil nil [121597 122082]) ("run-scheme" function (:arguments ("around" "quack-ad-run" "first" "nil" "activate")) nil [122084 124373]) ("scheme-proc" function (:arguments ("around" "quack-ad-scheme-proc" "first" "nil" "activate")) nil [124375 124639]) ("quack-force-frame-switch-to-window" function (:arguments ("win")) nil [124663 124949]) ("switch-to-scheme" function (:arguments ("before" "quack-ad-switch" "last" "nil" "activate")) nil [124951 126864]) ("quack-customize" function (:user-visible-flag t) nil [126881 126983]) ("quack-add-auto-mode-alist" function (:arguments ("alist")) nil [127001 127411]) ("quack-add-auto-mode-alist" code nil nil [127413 127982]) ("quack-str-syntax" function (:arguments ("str")) nil [128002 128172]) ("quack-kludged-string-to-syntax" function (:arguments ("str")) nil [128174 129121]) ("quack-pound-syntax-string" variable (:constant-flag t :default-value (if quack-gnuemacs-p "_ p14bn" "_ p14b")) nil [129348 129425]) ("quack-bar-syntax-string" variable (:constant-flag t :default-value (if quack-gnuemacs-p "_ 23bn" "_ 23b")) nil [129506 129582]) ("quack-pound-syntax" variable (:constant-flag t :default-value (quack-str-syntax quack-pound-syntax-string)) nil [129584 129658]) ("quack-bar-syntax" variable (:constant-flag t :default-value (quack-str-syntax quack-bar-syntax-string)) nil [129659 129731]) ("modify-syntax-entry" code nil nil [129733 129808]) ("modify-syntax-entry" code nil nil [129809 129884]) ("put" code nil nil [130109 130159]) ("put" code nil nil [130160 130210]) ("put" code nil nil [130211 130261]) ("put" code nil nil [130262 130312]) ("put" code nil nil [130313 130363]) ("put" code nil nil [130364 130414]) ("put" code nil nil [130415 130470]) ("put" code nil nil [130471 130526]) ("put" code nil nil [130527 130577]) ("put" code nil nil [130578 130628]) ("put" code nil nil [130629 130679]) ("put" code nil nil [130680 130730]) ("put" code nil nil [130731 130781]) ("put" code nil nil [130782 130832]) ("put" code nil nil [130833 130883]) ("put" code nil nil [130884 130934]) ("put" code nil nil [130935 130990]) ("put" code nil nil [130991 131041]) ("put" code nil nil [131042 131092]) ("put" code nil nil [131093 131143]) ("put" code nil nil [131144 131194]) ("put" code nil nil [131195 131245]) ("put" code nil nil [131246 131296]) ("put" code nil nil [131297 131352]) ("put" code nil nil [131353 131408]) ("put" code nil nil [131409 131459]) ("put" code nil nil [131460 131510]) ("put" code nil nil [131511 131561]) ("put" code nil nil [131562 131612]) ("put" code nil nil [131613 131663]) ("put" code nil nil [131664 131714]) ("put" code nil nil [131715 131765]) ("quack-scheme-mode-keymap" variable nil nil [131780 131817]) ("setq" code nil nil [131819 131871]) ("define-key" code nil nil [132375 132433]) ("define-key" code nil nil [132434 132500]) ("define-key" code nil nil [132501 132561]) ("define-key" code nil nil [132562 132615]) ("define-key" code nil nil [132616 132674]) ("define-key" code nil nil [132675 132737]) ("define-key" code nil nil [132738 132798]) ("quack-bool-menuitem" function (:arguments ("title" "var" "&rest" "rest")) nil [132811 133058]) ("quack-radio-menuitems" function (:arguments ("var" "alist")) nil [133060 133748]) ("quack-browser-radio-alist" variable (:constant-flag t :default-value (quote ((nil . "(Browse-URL Default)") (browse-url-galeon . "Galeon") (browse-url-mozilla . "Mozilla") (browse-url-kde . "KDE Konqueror") (browse-url-netscape . "Netscape Navigator") (browse-url-w3 . "Emacs W3") (w3m-browse-url . "W3M") (quack-w3m-browse-url-other-window . "W3M (in other window)") (browse-url-lynx-xterm . "Lynx in Xterm") (browse-url-lynx-emacs . "Lynx in Emacs") (browse-url-default-windows-browser . "MS Windows Default")))) nil [133750 134433]) ("quack-global-menuspec" variable (:constant-flag t :default-value (\` ("Quack" ["About Quack..." quack-about] ("Options" ("Startup Options" "These settings take full effect" "once Emacs is restarted." "---" (\, (quack-bool-menuitem "Put Quack on Global Menu Bar" quack-global-menu-p)) (\, (quack-bool-menuitem "Remap Find-File Bindings" quack-remap-find-file-bindings-p)) "---" ["Quack Directory..." (customize-option (quote quack-dir))] ["Quack Scheme Mode Keymap Prefix..." (customize-option (quote quack-scheme-mode-keymap-prefix))]) "---" ("Default Program" :filter quack-defaultprogram-menufilter) (\, (quack-bool-menuitem "Always Prompt for Program" quack-run-scheme-always-prompts-p)) (\, (quack-bool-menuitem "Program Prompt Defaults to Last" quack-run-scheme-prompt-defaults-to-last-p)) (\, (quack-bool-menuitem "Remember New Programs" quack-remember-new-programs-p)) "---" ("Newline Behavior" (\,@ (quack-radio-menuitems quack-newline-behavior (("Newline" . newline) ("Newline-Indent" . newline-indent) ("Indent-Newline-Indent" . indent-newline-indent))))) (\, (quack-bool-menuitem "Smart Open-Paren" quack-smart-open-paren-p)) ("Switch-to-Scheme Method" (\,@ (quack-radio-menuitems quack-switch-to-scheme-method (("Other Window" . other-window) ("Own Frame" . own-frame) ("Cmuscheme Behavior" . cmuscheme)))) "---" (\, (quack-bool-menuitem "Warp Pointer to Frame" quack-warp-pointer-to-frame-p :active (eq quack-switch-to-scheme-method (quote own-frame))))) ("Fontification" (\,@ (quack-radio-menuitems quack-fontify-style (("PLT Style" . plt) ("Extended GNU Emacs Style" . emacs) ("Emacs Default")))) "---" (\, (quack-bool-menuitem "Pretty Lambda (in PLT Style)" quack-pretty-lambda-p :active (and quack-pretty-lambda-supported-p (memq quack-fontify-style (quote (plt)))))) (\, (quack-bool-menuitem "Fontify Definition Names (in PLT Style)" quack-pltish-fontify-definition-names-p :active (eq quack-fontify-style (quote plt)))) (\, (quack-bool-menuitem "Fontify Keywords (in PLT Style)" quack-pltish-fontify-keywords-p :active (eq quack-fontify-style (quote plt)))) (\, (quack-bool-menuitem "Fontify 3-Semicolon Comments (in PLT Style)" quack-fontify-threesemi-p :active (memq quack-fontify-style (quote (plt)))))) ("Web Browser" (\,@ (mapcar (function (lambda (n) (let ((func (car n)) (title (cdr n))) (\` [(\, title) (quack-option-set (quote quack-browse-url-browser-function) (quote (\, func))) :style radio :selected (\, (if (not func) (quote (not quack-browse-url-browser-function)) (\` (eq quack-browse-url-browser-function (quote (\, func))))))])))) quack-browser-radio-alist)) ["(Other)..." (customize-option (quote quack-browse-url-browser-function)) :style radio :selected (not (assq quack-browse-url-browser-function quack-browser-radio-alist))]) (\, (quack-bool-menuitem "Tab Characters are Evil" quack-tabs-are-evil-p)) ("Local Keywords for Remote Manuals" (\,@ (quack-radio-menuitems quack-local-keywords-for-remote-manuals-p (("Permit" . t) ("Forbid") ("Always" . always))))) ["PLT Collection Directories..." (customize-option (quote quack-pltcollect-dirs))] "---" ["Customize..." quack-customize]) "---" ["Run Scheme" run-scheme] ["Switch to Scheme Buffer" switch-to-scheme] "---" ("View Manual" :filter quack-view-manual-menufilter) ("View SRFI" :filter quack-view-srfi-menufilter) ["View Keyword Docs..." quack-view-keyword-docs] ["Dired on PLT Collection..." quack-dired-pltcollect]))) nil [134435 139087]) ("quack-install-global-menu" function nil nil [139089 139787]) ("quack-install-global-menu" code nil nil [139884 139911]) ("quack-scheme-mode-menuspec" variable (:constant-flag t :default-value (\` ("Scheme" ("Quack Global" (\,@ (cdr quack-global-menuspec))) "---" ["Toggle Lambda Syntax" quack-toggle-lambda] ["Tidy Buffer Formatting" quack-tidy-buffer] ["Comment-Out Region" comment-region] ["Un-Comment-Out Region" quack-uncomment-region] "---" ["Evaluate Last S-expression" scheme-send-last-sexp] ["Evaluate Region" scheme-send-region] ["Evaluate Region & Go" scheme-send-region-and-go] ["Evaluate Last Definition" scheme-send-definition] ["Evaluate Last Definition & Go" scheme-send-definition-and-go] ["Compile Definition" scheme-compile-definition] ["Compile Definition & Go" scheme-compile-definition-and-go] ["Load Scheme File" scheme-load-file] ["Compile Scheme File" scheme-compile-file] "---" ["View Keyword Docs..." quack-view-keyword-docs] ["Quack Find File" quack-find-file]))) nil [140013 141047]) ("quack-scheme-mode-menu" variable nil nil [141049 141080]) ("quack-when-gnuemacs" code nil nil [141081 141431]) ("quack-view-manual-menufilter" function (:arguments ("arg")) nil [141433 141587]) ("quack-view-srfi-menufilter" function (:arguments ("arg")) nil [141589 142103]) ("quack-defaultprogram-menufilter" function (:arguments ("arg")) nil [142105 142577]) ("quack-optionmenu-items-setdefaultprogram" function nil nil [142579 143462]) ("mapcar" code nil nil [143464 143682]) ("quack-set-other-default-program" function nil nil [143711 144131]) ("quack-forget-program" function (:arguments ("program")) nil [144133 144322]) ("quack-custom-set" function (:arguments ("sym" "value")) nil [144324 145919]) ("quack-option-set" function (:arguments ("sym" "value" "&optional" "silently")) nil [145921 146241]) ("quack-option-toggle" function (:arguments ("sym" "&optional" "silently")) nil [146243 146532]) ("quack-update-scheme-mode-buffers" function nil nil [146534 146946]) ("quack-lambda-char" variable (:constant-flag t :default-value (make-char (quote greek-iso8859-7) 107)) nil [146967 147028]) ("quack-pretty-lambda-supported-p" variable (:constant-flag t :default-value (and quack-gnuemacs-p (>= emacs-major-version 21))) nil [147030 147125]) ("quack-emacsish1-font-lock-keywords" variable (:constant-flag t :default-value (\` (((\, (concat "[[(]" "\\(" "define\\*?" (quack-re-alt (quack-re-alt "" "-generic" "-generic-procedure" "-method" "-public" "/override" "/private" "/public") (quack-re-alt "-macro" "-syntax") "-class" "-module" "-signature" "-struct") "\\)" "\\>" "[ 	]*[[(]?" "\\(\\sw+\\)?")) (1 font-lock-keyword-face) (5 (cond ((match-beginning 3) font-lock-function-name-face) ((match-beginning 4) font-lock-variable-name-face) (t font-lock-type-face)) nil t)) ("[[(]\\(module\\)\\>[ 	]+\\(\\sw+\\)?" (1 font-lock-keyword-face) (2 font-lock-type-face nil t))))) nil [147142 148612]) ("quack-emacsish2-font-lock-keywords" variable (:constant-flag t :default-value (append quack-emacsish1-font-lock-keywords (\` (((\, (concat "[[(]\\(" (regexp-opt quack-emacsish-keywords-to-fontify) "\\)\\>")) . 1) ("\\<<\\sw+>\\>" . font-lock-type-face) ("\\<:\\sw+\\>" . font-lock-builtin-face))))) nil [148614 149095]) ("quack-pltish-num-re" function (:arguments ("radix" "digit" "base16-p")) nil [149097 151144]) ("quack-pltish-fls-base" variable (:constant-flag t :default-value (\` (("\\`\\(MrEd\\|Welcome to MzScheme\\) version [^
]+" . quack-banner-face) ("\\`Gambit Version 4\\.0[^
]*" . quack-banner-face) ("\\`Welcome to scsh [0-9][^
]+
Type ,\\? for help[^
]+" . quack-banner-face) ("\\`MIT/GNU Scheme running under [^
]+" . quack-banner-face) ("'\\sw+\\>" . quack-pltish-selfeval-face) ("'|\\(\\sw\\| \\)+|" . quack-pltish-selfeval-face) ("\\<#\\\\\\([][-`~!@#$%&*()_+=^{};:'\"<>,.?/|\\\\]\\|\\sw+\\>\\)" . quack-pltish-selfeval-face) ("[][()]" . quack-pltish-paren-face) ("\\<#\\(t\\|f\\)\\>" . quack-pltish-selfeval-face) ("\\<+\\(inf.0\\|nan\\)\\>" . quack-pltish-selfeval-face) ("\\<-inf.0\\>" . quack-pltish-selfeval-face) (\,@ (mapcar (function (lambda (args) (cons (apply (quote quack-pltish-num-re) args) (quote quack-pltish-selfeval-face)))) (quote (("#b" "[01]" nil) ("#o" "[0-7]" nil) ("\\(#d\\)?" "[0-9]" nil) ("#x" "[0-9a-fA-F]" t)))))))) nil [151146 152650]) ("quack-pltish-fls-defnames" variable (:constant-flag t :default-value (\` (((\, (concat "[[(]" "define\\*?" (quack-re-alt "" "-class" "-class" "-const-structure" "-constant" "-embedded" "-entry-point" "-external" "-foreign-record" "-foreign-type" "-foreign-variable" "-generic" "-generic-procedure" "-inline" "-location" "-macro" "-method" "-opt" "-public" "-reader-ctor" "-record" "-record-printer" "-record-type" "-signature" "-struct" "-structure" "-syntax" "-values" "/contract" "/override" "/private" "/public") "\\>" "[ 	]*[[(]?" "\\(\\sw+\\)")) (2 (let ((name (quack-match-string-no-properties 2))) (if (= (aref name (1- (length name))) 37) quack-pltish-class-defn-face quack-pltish-defn-face)) nil t)) ((\, (concat "[[(]def" (quack-re-alt (concat "macro" (quack-re-alt "" "-public")) "syntax") "\\>[ 	]+\\(\\sw+\\)")) 3 quack-pltish-defn-face nil t) ("[[(]defmac[ 	]+[[(][ 	]*\\(\\sw+\\)" 1 quack-pltish-defn-face nil t) ((\, (concat "[[(]def" (quack-re-alt "un" "var") "[ 	]+\\(\\sw+\\)")) 2 quack-pltish-defn-face nil t) ("[[(]define-module\\>[ 	]+[[(][ 	]*\\(\\sw+\\([ 	]+\\sw+\\)*\\)" 1 quack-pltish-module-defn-face nil t) ((\, (concat "[[(]define-" (quack-re-alt "values" "syntax-set" "syntaxes") "\\>[ 	]+[[(][ 	]*\\(\\sw+\\([ 	]+\\sw+\\)*\\)")) 2 quack-pltish-defn-face nil t) ("[[(]module\\>[ 	]+\\(\\sw+\\)" 1 quack-pltish-module-defn-face nil t)))) nil [152652 156152]) ("quack-install-fontification" function nil nil [157068 161978]) ("quack-locally-steal-key-bindings" function (:arguments ("old-func" "new-func")) nil [162010 162313]) ("quack-shared-mode-hookfunc-stuff" function nil nil [162315 164245]) ("quack-inferior-scheme-mode-hookfunc" function nil nil [164247 164330]) ("quack-scheme-mode-hookfunc" function nil nil [164332 164587]) ("add-hook" code nil nil [164589 164654]) ("add-hook" code nil nil [164655 164729]) ("quack-saved-compilation-error-regexp-alist" variable nil nil [164753 164808]) ("quack-compilation-error-regexp-alist-additions" variable (:constant-flag t :default-value (let ((no-line (if quack-xemacs-p (let ((m (make-marker))) (set-marker m 0) m) (quote quack-compile-no-line-number)))) (\` (((\, (concat "load-handler: expected a `module' declaration for `[^']+' in " "\"\\([^
\"]+\\)\", but found something else")) 1 (\, no-line)) ("setup-plt: Error during Compiling .zos for [^
]+ (\\([^
)]+\\))" 1 (\, no-line)))))) nil [164810 165574]) ("quack-compile-no-line-number" function (:arguments ("filename" "column")) nil [165576 165704]) ("quack-install-compilation-mode-stuff" function nil nil [165706 166066]) ("quack-install-compilation-mode-stuff" code nil nil [166068 166106]) ("quack-pltfile-mode-hook" variable nil nil [166558 166594]) ("quack-hiding-ovlcat" variable nil nil [166596 166624]) ("put" code nil nil [166625 166672]) ("put" code nil nil [166673 166713]) ("put" code nil nil [166714 166754]) ("quack-pltfile-mode-map" variable (:default-value (make-sparse-keymap)) nil [166756 166808]) ("define-key" code nil nil [166809 166868]) ("define-key" code nil nil [166869 166927]) ("define-key" code nil nil [166928 166978]) ("quack-pltfile-mode" function nil nil [167024 168142]) ("quack-prevent-pltfile-write" function nil nil [168144 168334]) ("quack-pltfile-raw" function nil nil [168336 168547]) ("quack-pltfile-quit" function nil nil [168549 168627]) ("quack-skip-whitespace-to-nonblank-line-beginning" function nil nil [168629 168780]) ("quack-pltfile-decode-buffer" function nil nil [168782 172596]) ("quack" package nil nil [187122 187138]))
    :file "quack.el"
    :pointmax 187162
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
