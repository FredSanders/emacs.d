;; Object mymisc/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "mymisc/"
  :tables (list 
   (semanticdb-table "factor-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("defgroup" code nil nil [908 1001]) ("factor-mode-hook" variable nil nil [1003 1105]) ("factor-word-def" variable (:default-value (quote ((((class color) (background dark)) :foreground "light blue") (((class color) (background light)) :foreground "dark blue")))) nil [1107 1358]) ("factor-stack-effect" variable (:default-value (quote ((t (:inherit font-lock-comment-face))))) nil [1360 1503]) ("factor-mode-abbrev-table" variable nil nil [1505 1591]) ("define-abbrev-table" code nil nil [1592 1642]) ("factor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "C-M-a") (quote factor-begining-of-defn)) (define-key map (kbd "C-M-e") (quote factor-end-of-defn)) map)) nil [1644 1873]) ("factor-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table))) (modify-syntax-entry 34 "\" " table) (modify-syntax-entry 32 "    " table) (modify-syntax-entry 9 "    " table) (modify-syntax-entry 12 "    " table) (modify-syntax-entry 10 ">   " table) (modify-syntax-entry 13 ">   " table) (modify-syntax-entry 33 "<   " table) (modify-syntax-entry 96 "'   " table) (modify-syntax-entry 39 "'   " table) (modify-syntax-entry 44 "'   " table) (modify-syntax-entry 40 "<)  " table) (modify-syntax-entry 41 ">(  " table) (modify-syntax-entry 91 "(]  " table) (modify-syntax-entry 93 ")[  " table) table)) nil [1875 2664]) ("factor-menu" variable nil nil [2666 2690]) ("easy-menu-define" code nil nil [2691 2776]) ("factor-begining-of-line-keywords" variable (:default-value (list "USING:" "MIXIN:" "IN:" "INSTANCE:" "DEFER:" "<PRIVATE" "PRIVATE>" "SYMBOL:" "MAIN:" "SINGLETONS:")) nil [2778 3043]) ("factor-defining-words" variable (:default-value (list ":" "::" "MEMO:" "MACRO:" "MACRO::" "GENERIC:" "GENERIC#" "MATH:" "HOOK:" "M:" "METHOD:" "ERROR:" "TUPLE:" "C:" "SINGILETON:")) nil [3045 3302]) ("factor-defining-words-re" variable (:default-value (concat "^" (regexp-opt factor-defining-words t) " ")) nil [3304 3433]) ("factor-word-re" variable (:constant-flag t :default-value " \\([^ +\\) ") nil [3435 3519]) ("factor-number-re" variable (:constant-flag t :default-value "\\<\\(\\(?:\\+\\|-\\)?[0-9]+\\(?:\\.[0-9]+\\)?\\)\\>") nil [3521 3642]) ("factor-mode-font-lock-keywords" variable (:constant-flag t :default-value (list (concat "^" (regexp-opt factor-begining-of-line-keywords t)) factor-defining-words-re (cons factor-number-re (quote (1 font-lock-constant-face))))) nil [3644 4150]) ("factor-indent-line" function nil nil [4152 4267]) ("factor-begining-of-defn" function nil nil [4269 4371]) ("factor-end-of-defn" function nil nil [4373 4454]) ("set-local-variable" function (:arguments ("variable" "value")) nil [4456 4550]) ("factor-mode" function (:user-visible-flag t) nil [4567 5247]) ("factor-mode" package nil nil [5249 5271]))
    :file "factor-mode.el"
    :pointmax 5301
    :unmatched-syntax 'nil
    )
   (semanticdb-table "mymisc.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("set-local-variable" function (:arguments ("variable" "value")) nil [45 139]) ("load-library" code nil nil [141 163]) ("factor-get-effect" function (:user-visible-flag t) nil [200 973]) ("wikify-link" function (:arguments ("start" "end")) nil [975 1389]) ("totd" function nil nil [1391 1936]) ("*user-name*" variable (:default-value "James Cash") nil [1938 1971]) ("sign-revision" function (:user-visible-flag t) nil [1973 2243]) ("insert-date" function (:user-visible-flag t) nil [2245 2366]) ("mathify-region" function (:user-visible-flag t :arguments ("start" "end")) nil [2368 2601]) ("increment-number-at-point" function (:user-visible-flag t :arguments ("&optional" "amount")) nil [2603 3039]) ("decrement-number-at-point" function (:arguments ("&optional" "amount")) nil [3041 3209]) ("zap-to-char-back" function (:user-visible-flag t :arguments ("arg" "char")) nil [3211 3655]) ("open-word-file" function (:user-visible-flag t :arguments ("file")) nil [3941 4195]) ("rename-file-and-buffer" function (:user-visible-flag t :arguments ("new-name")) nil [4261 4803]) ("move-buffer-file" function (:user-visible-flag t :arguments ("dir")) nil [4877 5444]) ("unicode-symbol" function (:arguments ("name")) nil [5446 6804]) ("substitute-pattern-with-unicode" function (:user-visible-flag t :arguments ("pattern" "symbol")) nil [6806 7165]) ("substitute-patterns-with-unicode" function (:arguments ("patterns")) nil [7169 7380]) ("pretty-greek" function nil nil [7382 8490]) ("lispdoc" function (:user-visible-flag t) nil [8492 9384]) ("point-stack" variable nil nil [9386 9410]) ("point-stack-push-back" function (:user-visible-flag t) nil [9412 9634]) ("point-stack-push" function (:user-visible-flag t) nil [9636 9836]) ("point-stack-pop" function (:user-visible-flag t) nil [9838 10111]) ("mb-str-to-unibyte-char" function (:arguments ("s")) nil [10227 10386]) ("remap-keyboard" function (:arguments ("mapping")) nil [10388 10633]) ("add-hook" code nil nil [10635 10879]) ("vi-open-next-line" function (:user-visible-flag t :arguments ("arg")) nil [10881 11111]) ("kill-syntax-forward" function (:user-visible-flag t) nil [11168 11391]) ("kill-syntax-backward" function (:user-visible-flag t) nil [11393 11619]) ("move-line" function (:user-visible-flag t :arguments ("n")) nil [11621 12110]) ("move-line-up" function (:user-visible-flag t :arguments ("n")) nil [12112 12237]) ("move-line-down" function (:user-visible-flag t :arguments ("n")) nil [12239 12363]) ("char-count-buffer" function (:user-visible-flag t) nil [12365 12720]) ("count-words-buffer" function (:user-visible-flag t) nil [12722 12886]) ("count-words-region" function (:user-visible-flag t :arguments ("beginning" "end")) nil [12888 13345]) ("eval-and-replace" function (:user-visible-flag t) nil [13347 13638]) ("scheme-include-file" function (:user-visible-flag t :arguments ("file-name")) nil [13640 14255]) ("smalltalk-subclass-template" function (:arguments ("class-name" "inherits")) nil [14258 14775]) ("copy-line" function (:user-visible-flag t :arguments ("arg")) nil [14777 15027]) ("mymisc" package nil nil [15029 15046]))
    :file "mymisc.el"
    :pointmax 15046
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
