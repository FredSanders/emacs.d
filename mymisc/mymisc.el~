;; Some things that I'm working on here...

(defun char-count-buffer ()
  "Gives the number of non-space characters in the buffer"
  (interactive)
  (save-excursion
    (goto-char (point-min)) ;; eqv (beginning-of-buffer)
    (let ((char-count 0))
      (while (not (eobp))
	(unless (looking-at "[ \t\r\n]")
	  (incf char-count))
	(forward-char 1))
      (message "%d chars in buffer" char-count))))

(defun word-count-buffer ()
  "Gives the number of words in the buffer"
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((word-count 0))
      (while (not (eobp)) ;; (re-search-forward "\\w\\b" nil t))
	(incf word-count)
	(forward-word 1))
      (message "%d words in buffer" word-count))))

(defun count-words-region (beginning end)
  "Print number of words in the region."
  (interactive "r")
  (message "Counting words in region ... ")
  (save-excursion
    (let ((count 0))
      (goto-char beginning)
      (while (and (< (point) end)
		  (re-search-forward "\\w+\\W*" end t))
	(incf count))
      (cond ((zerop count)
	     (message
	      "The region does NOT have any words."))
	    ((= 1 count)
	     (message
	      "The region has 1 word."))
	    (t
	     (message
	      "The region has %d words." count))))))

(defun eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(defun scheme-include-file (file-name)
  "Include a Scheme file FILE-NAME into the inferior Scheme process."
  (interactive (comint-get-source "Include Scheme file: " scheme-prev-l/c-dir/file
				  scheme-source-modes t)) ; t because `include'
                                                          ; needs an exact name
  (comint-check-source file-name) ; Check to see if buffer needs saved.
  (setq scheme-prev-l/c-dir/file (cons (file-name-directory    file-name)
				       (file-name-nondirectory file-name)))
  (comint-send-string (scheme-proc) (concat "(include \""
					    file-name
					    "\"\)\n")))


(defun smalltalk-subclass-template (class-name inherits) 
  (interactive
   (list (read-string "Subclass: " (smalltalk-backward-find-class-name))
	 (read-string "Inherits from: " "Object")))
  (insert (format "%s subclass: #%s" inherits class-name)) (newline-and-indent)
  (insert (format "instanceVariableNames: '"))
  (save-excursion
    (insert (format "'")) (newline-and-indent)
    (insert (format "classVariableNames: ''")) (newline-and-indent)
    (insert (format "poolDictionaries: ''")) (newline-and-indent)
    (insert (format "category: nil !\n\n"))))

(defun copy-line (arg)
  "Adds the line the point is on to the kill-ring"
  (interactive "p")
  (kill-ring-save (line-beginning-position)
                  (line-beginning-position (+ 1 arg)))
  (message "%d line%s copied" arg (if (= 1 arg) "" "s")))


;;; This is just for example on doing elisp stuff
;; ;;; Set the % key to goto matched parenthesis.
;; (show-paren-mode t)
;; (global-set-key "%" 'match-paren)
;; (defun match-paren (arg)
;;   "Go to the matching parenthesis if on parenthesis otherwise insert %."
;;   (interactive "p")
;;   (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
;; 	((looking-at "\\s\)") (forward-char 1) (backward-list 1))
;; 	(t (self-insert-command (or arg 1)))))

